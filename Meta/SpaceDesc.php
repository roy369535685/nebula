<?php
namespace Nebula\Meta;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SpaceDesc
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'space_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'partition_num',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'replica_factor',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'charset_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'collate_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'vid_type',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Nebula\Meta\ColumnTypeDef',
        ),
        7 => array(
            'var' => 'group_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'isolation_level',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\Nebula\Meta\IsolationLevel',
        ),
        9 => array(
            'var' => 'comment',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $space_name = null;
    /**
     * @var int
     */
    public $partition_num = 0;
    /**
     * @var int
     */
    public $replica_factor = 0;
    /**
     * @var string
     */
    public $charset_name = null;
    /**
     * @var string
     */
    public $collate_name = null;
    /**
     * @var \Nebula\Meta\ColumnTypeDef
     */
    public $vid_type = null;
    /**
     * @var string
     */
    public $group_name = null;
    /**
     * @var int
     */
    public $isolation_level = null;
    /**
     * @var string
     */
    public $comment = null;

    public function __construct($vals = null)
    {
        $this->vid_type = new \Nebula\Meta\ColumnTypeDef(array(
            "type" =>             7,
            "type_length" => 8,
        ));
        if (is_array($vals)) {
            if (isset($vals['space_name'])) {
                $this->space_name = $vals['space_name'];
            }
            if (isset($vals['partition_num'])) {
                $this->partition_num = $vals['partition_num'];
            }
            if (isset($vals['replica_factor'])) {
                $this->replica_factor = $vals['replica_factor'];
            }
            if (isset($vals['charset_name'])) {
                $this->charset_name = $vals['charset_name'];
            }
            if (isset($vals['collate_name'])) {
                $this->collate_name = $vals['collate_name'];
            }
            if (isset($vals['vid_type'])) {
                $this->vid_type = $vals['vid_type'];
            }
            if (isset($vals['group_name'])) {
                $this->group_name = $vals['group_name'];
            }
            if (isset($vals['isolation_level'])) {
                $this->isolation_level = $vals['isolation_level'];
            }
            if (isset($vals['comment'])) {
                $this->comment = $vals['comment'];
            }
        }
    }

    public function getName()
    {
        return 'SpaceDesc';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->space_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->partition_num);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->replica_factor);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->charset_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->collate_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->vid_type = new \Nebula\Meta\ColumnTypeDef();
                        $xfer += $this->vid_type->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->group_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->isolation_level);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->comment);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SpaceDesc');
        if ($this->space_name !== null) {
            $xfer += $output->writeFieldBegin('space_name', TType::STRING, 1);
            $xfer += $output->writeString($this->space_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->partition_num !== null) {
            $xfer += $output->writeFieldBegin('partition_num', TType::I32, 2);
            $xfer += $output->writeI32($this->partition_num);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->replica_factor !== null) {
            $xfer += $output->writeFieldBegin('replica_factor', TType::I32, 3);
            $xfer += $output->writeI32($this->replica_factor);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->charset_name !== null) {
            $xfer += $output->writeFieldBegin('charset_name', TType::STRING, 4);
            $xfer += $output->writeString($this->charset_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->collate_name !== null) {
            $xfer += $output->writeFieldBegin('collate_name', TType::STRING, 5);
            $xfer += $output->writeString($this->collate_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vid_type !== null) {
            if (!is_object($this->vid_type)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('vid_type', TType::STRUCT, 6);
            $xfer += $this->vid_type->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->group_name !== null) {
            $xfer += $output->writeFieldBegin('group_name', TType::STRING, 7);
            $xfer += $output->writeString($this->group_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isolation_level !== null) {
            $xfer += $output->writeFieldBegin('isolation_level', TType::I32, 8);
            $xfer += $output->writeI32($this->isolation_level);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->comment !== null) {
            $xfer += $output->writeFieldBegin('comment', TType::STRING, 9);
            $xfer += $output->writeString($this->comment);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
