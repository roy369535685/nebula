<?php
namespace Nebula\Common;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Polygon
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'coordListList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::LST,
            'elem' => array(
                'type' => TType::LST,
                'etype' => TType::STRUCT,
                'elem' => array(
                    'type' => TType::STRUCT,
                    'class' => '\Nebula\Common\Coordinate',
                    ),
                ),
        ),
    );

    /**
     * @var (\Nebula\Common\Coordinate[])[]
     */
    public $coordListList = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['coordListList'])) {
                $this->coordListList = $vals['coordListList'];
            }
        }
    }

    public function getName()
    {
        return 'Polygon';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->coordListList = array();
                        $_size52 = 0;
                        $_etype55 = 0;
                        $xfer += $input->readListBegin($_etype55, $_size52);
                        for ($_i56 = 0; $_i56 < $_size52; ++$_i56) {
                            $elem57 = null;
                            $elem57 = array();
                            $_size58 = 0;
                            $_etype61 = 0;
                            $xfer += $input->readListBegin($_etype61, $_size58);
                            for ($_i62 = 0; $_i62 < $_size58; ++$_i62) {
                                $elem63 = null;
                                $elem63 = new \Nebula\Common\Coordinate();
                                $xfer += $elem63->read($input);
                                $elem57 []= $elem63;
                            }
                            $xfer += $input->readListEnd();
                            $this->coordListList []= $elem57;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Polygon');
        if ($this->coordListList !== null) {
            if (!is_array($this->coordListList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('coordListList', TType::LST, 1);
            $output->writeListBegin(TType::LST, count($this->coordListList));
            foreach ($this->coordListList as $iter64) {
                $output->writeListBegin(TType::STRUCT, count($iter64));
                foreach ($iter64 as $iter65) {
                    $xfer += $iter65->write($output);
                }
                $output->writeListEnd();
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
