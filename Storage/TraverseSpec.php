<?php
namespace Nebula\Storage;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TraverseSpec
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'edge_types',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
        2 => array(
            'var' => 'edge_direction',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\Nebula\Storage\EdgeDirection',
        ),
        3 => array(
            'var' => 'dedup',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        4 => array(
            'var' => 'stat_props',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Storage\StatProp',
                ),
        ),
        5 => array(
            'var' => 'vertex_props',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Storage\VertexProp',
                ),
        ),
        6 => array(
            'var' => 'edge_props',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Storage\EdgeProp',
                ),
        ),
        7 => array(
            'var' => 'expressions',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Storage\Expr',
                ),
        ),
        8 => array(
            'var' => 'order_by',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Storage\OrderBy',
                ),
        ),
        9 => array(
            'var' => 'random',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        10 => array(
            'var' => 'limit',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        11 => array(
            'var' => 'filter',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int[]
     */
    public $edge_types = null;
    /**
     * @var int
     */
    public $edge_direction =     1;
    /**
     * @var bool
     */
    public $dedup = false;
    /**
     * @var \Nebula\Storage\StatProp[]
     */
    public $stat_props = null;
    /**
     * @var \Nebula\Storage\VertexProp[]
     */
    public $vertex_props = null;
    /**
     * @var \Nebula\Storage\EdgeProp[]
     */
    public $edge_props = null;
    /**
     * @var \Nebula\Storage\Expr[]
     */
    public $expressions = null;
    /**
     * @var \Nebula\Storage\OrderBy[]
     */
    public $order_by = null;
    /**
     * @var bool
     */
    public $random = null;
    /**
     * @var int
     */
    public $limit = null;
    /**
     * @var string
     */
    public $filter = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['edge_types'])) {
                $this->edge_types = $vals['edge_types'];
            }
            if (isset($vals['edge_direction'])) {
                $this->edge_direction = $vals['edge_direction'];
            }
            if (isset($vals['dedup'])) {
                $this->dedup = $vals['dedup'];
            }
            if (isset($vals['stat_props'])) {
                $this->stat_props = $vals['stat_props'];
            }
            if (isset($vals['vertex_props'])) {
                $this->vertex_props = $vals['vertex_props'];
            }
            if (isset($vals['edge_props'])) {
                $this->edge_props = $vals['edge_props'];
            }
            if (isset($vals['expressions'])) {
                $this->expressions = $vals['expressions'];
            }
            if (isset($vals['order_by'])) {
                $this->order_by = $vals['order_by'];
            }
            if (isset($vals['random'])) {
                $this->random = $vals['random'];
            }
            if (isset($vals['limit'])) {
                $this->limit = $vals['limit'];
            }
            if (isset($vals['filter'])) {
                $this->filter = $vals['filter'];
            }
        }
    }

    public function getName()
    {
        return 'TraverseSpec';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->edge_types = array();
                        $_size30 = 0;
                        $_etype33 = 0;
                        $xfer += $input->readListBegin($_etype33, $_size30);
                        for ($_i34 = 0; $_i34 < $_size30; ++$_i34) {
                            $elem35 = null;
                            $xfer += $input->readI32($elem35);
                            $this->edge_types []= $elem35;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->edge_direction);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->dedup);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->stat_props = array();
                        $_size36 = 0;
                        $_etype39 = 0;
                        $xfer += $input->readListBegin($_etype39, $_size36);
                        for ($_i40 = 0; $_i40 < $_size36; ++$_i40) {
                            $elem41 = null;
                            $elem41 = new \Nebula\Storage\StatProp();
                            $xfer += $elem41->read($input);
                            $this->stat_props []= $elem41;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->vertex_props = array();
                        $_size42 = 0;
                        $_etype45 = 0;
                        $xfer += $input->readListBegin($_etype45, $_size42);
                        for ($_i46 = 0; $_i46 < $_size42; ++$_i46) {
                            $elem47 = null;
                            $elem47 = new \Nebula\Storage\VertexProp();
                            $xfer += $elem47->read($input);
                            $this->vertex_props []= $elem47;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->edge_props = array();
                        $_size48 = 0;
                        $_etype51 = 0;
                        $xfer += $input->readListBegin($_etype51, $_size48);
                        for ($_i52 = 0; $_i52 < $_size48; ++$_i52) {
                            $elem53 = null;
                            $elem53 = new \Nebula\Storage\EdgeProp();
                            $xfer += $elem53->read($input);
                            $this->edge_props []= $elem53;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->expressions = array();
                        $_size54 = 0;
                        $_etype57 = 0;
                        $xfer += $input->readListBegin($_etype57, $_size54);
                        for ($_i58 = 0; $_i58 < $_size54; ++$_i58) {
                            $elem59 = null;
                            $elem59 = new \Nebula\Storage\Expr();
                            $xfer += $elem59->read($input);
                            $this->expressions []= $elem59;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->order_by = array();
                        $_size60 = 0;
                        $_etype63 = 0;
                        $xfer += $input->readListBegin($_etype63, $_size60);
                        for ($_i64 = 0; $_i64 < $_size60; ++$_i64) {
                            $elem65 = null;
                            $elem65 = new \Nebula\Storage\OrderBy();
                            $xfer += $elem65->read($input);
                            $this->order_by []= $elem65;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->random);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->limit);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->filter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TraverseSpec');
        if ($this->edge_types !== null) {
            if (!is_array($this->edge_types)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('edge_types', TType::LST, 1);
            $output->writeListBegin(TType::I32, count($this->edge_types));
            foreach ($this->edge_types as $iter66) {
                $xfer += $output->writeI32($iter66);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->edge_direction !== null) {
            $xfer += $output->writeFieldBegin('edge_direction', TType::I32, 2);
            $xfer += $output->writeI32($this->edge_direction);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dedup !== null) {
            $xfer += $output->writeFieldBegin('dedup', TType::BOOL, 3);
            $xfer += $output->writeBool($this->dedup);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stat_props !== null) {
            if (!is_array($this->stat_props)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('stat_props', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->stat_props));
            foreach ($this->stat_props as $iter67) {
                $xfer += $iter67->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->vertex_props !== null) {
            if (!is_array($this->vertex_props)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('vertex_props', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->vertex_props));
            foreach ($this->vertex_props as $iter68) {
                $xfer += $iter68->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->edge_props !== null) {
            if (!is_array($this->edge_props)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('edge_props', TType::LST, 6);
            $output->writeListBegin(TType::STRUCT, count($this->edge_props));
            foreach ($this->edge_props as $iter69) {
                $xfer += $iter69->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->expressions !== null) {
            if (!is_array($this->expressions)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('expressions', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->expressions));
            foreach ($this->expressions as $iter70) {
                $xfer += $iter70->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->order_by !== null) {
            if (!is_array($this->order_by)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('order_by', TType::LST, 8);
            $output->writeListBegin(TType::STRUCT, count($this->order_by));
            foreach ($this->order_by as $iter71) {
                $xfer += $iter71->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->random !== null) {
            $xfer += $output->writeFieldBegin('random', TType::BOOL, 9);
            $xfer += $output->writeBool($this->random);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->limit !== null) {
            $xfer += $output->writeFieldBegin('limit', TType::I64, 10);
            $xfer += $output->writeI64($this->limit);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filter !== null) {
            $xfer += $output->writeFieldBegin('filter', TType::STRING, 11);
            $xfer += $output->writeString($this->filter);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
