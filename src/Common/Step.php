<?php
namespace Nebula\Common;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Step
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'dst',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Nebula\Common\Vertex',
        ),
        2 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'ranking',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'props',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Common\Value',
                ),
        ),
    );

    /**
     * @var \Nebula\Common\Vertex
     */
    public $dst = null;
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var int
     */
    public $ranking = null;
    /**
     * @var array
     */
    public $props = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['dst'])) {
                $this->dst = $vals['dst'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['ranking'])) {
                $this->ranking = $vals['ranking'];
            }
            if (isset($vals['props'])) {
                $this->props = $vals['props'];
            }
        }
    }

    public function getName()
    {
        return 'Step';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->dst = new \Nebula\Common\Vertex();
                        $xfer += $this->dst->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->ranking);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::MAP) {
                        $this->props = array();
                        $_size91 = 0;
                        $_ktype92 = 0;
                        $_vtype93 = 0;
                        $xfer += $input->readMapBegin($_ktype92, $_vtype93, $_size91);
                        for ($_i95 = 0; $_i95 < $_size91; ++$_i95) {
                            $key96 = '';
                            $val97 = new \Nebula\Common\Value();
                            $xfer += $input->readString($key96);
                            $val97 = new \Nebula\Common\Value();
                            $xfer += $val97->read($input);
                            $this->props[$key96] = $val97;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Step');
        if ($this->dst !== null) {
            if (!is_object($this->dst)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('dst', TType::STRUCT, 1);
            $xfer += $this->dst->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::I32, 2);
            $xfer += $output->writeI32($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ranking !== null) {
            $xfer += $output->writeFieldBegin('ranking', TType::I64, 4);
            $xfer += $output->writeI64($this->ranking);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->props !== null) {
            if (!is_array($this->props)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('props', TType::MAP, 5);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->props));
            foreach ($this->props as $kiter98 => $viter99) {
                $xfer += $output->writeString($kiter98);
                $xfer += $viter99->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
