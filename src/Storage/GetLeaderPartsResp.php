<?php
namespace Nebula\Storage;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GetLeaderPartsResp
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'result',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\Nebula\Storage\ResponseCommon',
        ),
        2 => array(
            'var' => 'leader_parts',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::LST,
            'key' => array(
                'type' => TType::I32,
            ),
            'val' => array(
                'type' => TType::LST,
                'etype' => TType::I32,
                'elem' => array(
                    'type' => TType::I32,
                    ),
                ),
        ),
    );

    /**
     * @var \Nebula\Storage\ResponseCommon
     */
    public $result = null;
    /**
     * @var array
     */
    public $leader_parts = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['result'])) {
                $this->result = $vals['result'];
            }
            if (isset($vals['leader_parts'])) {
                $this->leader_parts = $vals['leader_parts'];
            }
        }
    }

    public function getName()
    {
        return 'GetLeaderPartsResp';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->result = new \Nebula\Storage\ResponseCommon();
                        $xfer += $this->result->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::MAP) {
                        $this->leader_parts = array();
                        $_size354 = 0;
                        $_ktype355 = 0;
                        $_vtype356 = 0;
                        $xfer += $input->readMapBegin($_ktype355, $_vtype356, $_size354);
                        for ($_i358 = 0; $_i358 < $_size354; ++$_i358) {
                            $key359 = 0;
                            $val360 = array();
                            $xfer += $input->readI32($key359);
                            $val360 = array();
                            $_size361 = 0;
                            $_etype364 = 0;
                            $xfer += $input->readListBegin($_etype364, $_size361);
                            for ($_i365 = 0; $_i365 < $_size361; ++$_i365) {
                                $elem366 = null;
                                $xfer += $input->readI32($elem366);
                                $val360 []= $elem366;
                            }
                            $xfer += $input->readListEnd();
                            $this->leader_parts[$key359] = $val360;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GetLeaderPartsResp');
        if ($this->result !== null) {
            if (!is_object($this->result)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('result', TType::STRUCT, 1);
            $xfer += $this->result->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->leader_parts !== null) {
            if (!is_array($this->leader_parts)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('leader_parts', TType::MAP, 2);
            $output->writeMapBegin(TType::I32, TType::LST, count($this->leader_parts));
            foreach ($this->leader_parts as $kiter367 => $viter368) {
                $xfer += $output->writeI32($kiter367);
                $output->writeListBegin(TType::I32, count($viter368));
                foreach ($viter368 as $iter369) {
                    $xfer += $output->writeI32($iter369);
                }
                $output->writeListEnd();
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
