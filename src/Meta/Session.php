<?php
namespace Nebula\Meta;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Session
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'session_id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'create_time',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'update_time',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'user_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'space_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'graph_addr',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Nebula\Common\HostAddr',
        ),
        7 => array(
            'var' => 'timezone',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        8 => array(
            'var' => 'client_ip',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'configs',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Common\Value',
                ),
        ),
        10 => array(
            'var' => 'queries',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I64,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::I64,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Meta\QueryDesc',
                ),
        ),
    );

    /**
     * @var int
     */
    public $session_id = null;
    /**
     * @var int
     */
    public $create_time = null;
    /**
     * @var int
     */
    public $update_time = null;
    /**
     * @var string
     */
    public $user_name = null;
    /**
     * @var string
     */
    public $space_name = null;
    /**
     * @var \Nebula\Common\HostAddr
     */
    public $graph_addr = null;
    /**
     * @var int
     */
    public $timezone = null;
    /**
     * @var string
     */
    public $client_ip = null;
    /**
     * @var array
     */
    public $configs = null;
    /**
     * @var array
     */
    public $queries = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['session_id'])) {
                $this->session_id = $vals['session_id'];
            }
            if (isset($vals['create_time'])) {
                $this->create_time = $vals['create_time'];
            }
            if (isset($vals['update_time'])) {
                $this->update_time = $vals['update_time'];
            }
            if (isset($vals['user_name'])) {
                $this->user_name = $vals['user_name'];
            }
            if (isset($vals['space_name'])) {
                $this->space_name = $vals['space_name'];
            }
            if (isset($vals['graph_addr'])) {
                $this->graph_addr = $vals['graph_addr'];
            }
            if (isset($vals['timezone'])) {
                $this->timezone = $vals['timezone'];
            }
            if (isset($vals['client_ip'])) {
                $this->client_ip = $vals['client_ip'];
            }
            if (isset($vals['configs'])) {
                $this->configs = $vals['configs'];
            }
            if (isset($vals['queries'])) {
                $this->queries = $vals['queries'];
            }
        }
    }

    public function getName()
    {
        return 'Session';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->session_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->create_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->update_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->user_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->space_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->graph_addr = new \Nebula\Common\HostAddr();
                        $xfer += $this->graph_addr->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->timezone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->client_ip);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::MAP) {
                        $this->configs = array();
                        $_size507 = 0;
                        $_ktype508 = 0;
                        $_vtype509 = 0;
                        $xfer += $input->readMapBegin($_ktype508, $_vtype509, $_size507);
                        for ($_i511 = 0; $_i511 < $_size507; ++$_i511) {
                            $key512 = '';
                            $val513 = new \Nebula\Common\Value();
                            $xfer += $input->readString($key512);
                            $val513 = new \Nebula\Common\Value();
                            $xfer += $val513->read($input);
                            $this->configs[$key512] = $val513;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::MAP) {
                        $this->queries = array();
                        $_size514 = 0;
                        $_ktype515 = 0;
                        $_vtype516 = 0;
                        $xfer += $input->readMapBegin($_ktype515, $_vtype516, $_size514);
                        for ($_i518 = 0; $_i518 < $_size514; ++$_i518) {
                            $key519 = 0;
                            $val520 = new \Nebula\Meta\QueryDesc();
                            $xfer += $input->readI64($key519);
                            $val520 = new \Nebula\Meta\QueryDesc();
                            $xfer += $val520->read($input);
                            $this->queries[$key519] = $val520;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Session');
        if ($this->session_id !== null) {
            $xfer += $output->writeFieldBegin('session_id', TType::I64, 1);
            $xfer += $output->writeI64($this->session_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->create_time !== null) {
            $xfer += $output->writeFieldBegin('create_time', TType::I64, 2);
            $xfer += $output->writeI64($this->create_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->update_time !== null) {
            $xfer += $output->writeFieldBegin('update_time', TType::I64, 3);
            $xfer += $output->writeI64($this->update_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->user_name !== null) {
            $xfer += $output->writeFieldBegin('user_name', TType::STRING, 4);
            $xfer += $output->writeString($this->user_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->space_name !== null) {
            $xfer += $output->writeFieldBegin('space_name', TType::STRING, 5);
            $xfer += $output->writeString($this->space_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->graph_addr !== null) {
            if (!is_object($this->graph_addr)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('graph_addr', TType::STRUCT, 6);
            $xfer += $this->graph_addr->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timezone !== null) {
            $xfer += $output->writeFieldBegin('timezone', TType::I32, 7);
            $xfer += $output->writeI32($this->timezone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->client_ip !== null) {
            $xfer += $output->writeFieldBegin('client_ip', TType::STRING, 8);
            $xfer += $output->writeString($this->client_ip);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->configs !== null) {
            if (!is_array($this->configs)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('configs', TType::MAP, 9);
            $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->configs));
            foreach ($this->configs as $kiter521 => $viter522) {
                $xfer += $output->writeString($kiter521);
                $xfer += $viter522->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->queries !== null) {
            if (!is_array($this->queries)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('queries', TType::MAP, 10);
            $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->queries));
            foreach ($this->queries as $kiter523 => $viter524) {
                $xfer += $output->writeI64($kiter523);
                $xfer += $viter524->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
