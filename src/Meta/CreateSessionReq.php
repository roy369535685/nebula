<?php
namespace Nebula\Meta;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CreateSessionReq
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'user',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'graph_addr',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Nebula\Common\HostAddr',
        ),
        3 => array(
            'var' => 'client_ip',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $user = null;
    /**
     * @var \Nebula\Common\HostAddr
     */
    public $graph_addr = null;
    /**
     * @var string
     */
    public $client_ip = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['user'])) {
                $this->user = $vals['user'];
            }
            if (isset($vals['graph_addr'])) {
                $this->graph_addr = $vals['graph_addr'];
            }
            if (isset($vals['client_ip'])) {
                $this->client_ip = $vals['client_ip'];
            }
        }
    }

    public function getName()
    {
        return 'CreateSessionReq';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->user);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->graph_addr = new \Nebula\Common\HostAddr();
                        $xfer += $this->graph_addr->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->client_ip);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CreateSessionReq');
        if ($this->user !== null) {
            $xfer += $output->writeFieldBegin('user', TType::STRING, 1);
            $xfer += $output->writeString($this->user);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->graph_addr !== null) {
            if (!is_object($this->graph_addr)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('graph_addr', TType::STRUCT, 2);
            $xfer += $this->graph_addr->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->client_ip !== null) {
            $xfer += $output->writeFieldBegin('client_ip', TType::STRING, 3);
            $xfer += $output->writeString($this->client_ip);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
