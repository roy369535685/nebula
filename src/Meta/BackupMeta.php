<?php
namespace Nebula\Meta;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class BackupMeta
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'backup_info',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::STRUCT,
            'key' => array(
                'type' => TType::I32,
            ),
            'val' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Meta\SpaceBackupInfo',
                ),
        ),
        2 => array(
            'var' => 'meta_files',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'backup_name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'full',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'include_system_space',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'create_time',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var array
     */
    public $backup_info = null;
    /**
     * @var string[]
     */
    public $meta_files = null;
    /**
     * @var string
     */
    public $backup_name = null;
    /**
     * @var bool
     */
    public $full = null;
    /**
     * @var bool
     */
    public $include_system_space = null;
    /**
     * @var int
     */
    public $create_time = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['backup_info'])) {
                $this->backup_info = $vals['backup_info'];
            }
            if (isset($vals['meta_files'])) {
                $this->meta_files = $vals['meta_files'];
            }
            if (isset($vals['backup_name'])) {
                $this->backup_name = $vals['backup_name'];
            }
            if (isset($vals['full'])) {
                $this->full = $vals['full'];
            }
            if (isset($vals['include_system_space'])) {
                $this->include_system_space = $vals['include_system_space'];
            }
            if (isset($vals['create_time'])) {
                $this->create_time = $vals['create_time'];
            }
        }
    }

    public function getName()
    {
        return 'BackupMeta';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::MAP) {
                        $this->backup_info = array();
                        $_size440 = 0;
                        $_ktype441 = 0;
                        $_vtype442 = 0;
                        $xfer += $input->readMapBegin($_ktype441, $_vtype442, $_size440);
                        for ($_i444 = 0; $_i444 < $_size440; ++$_i444) {
                            $key445 = 0;
                            $val446 = new \Nebula\Meta\SpaceBackupInfo();
                            $xfer += $input->readI32($key445);
                            $val446 = new \Nebula\Meta\SpaceBackupInfo();
                            $xfer += $val446->read($input);
                            $this->backup_info[$key445] = $val446;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->meta_files = array();
                        $_size447 = 0;
                        $_etype450 = 0;
                        $xfer += $input->readListBegin($_etype450, $_size447);
                        for ($_i451 = 0; $_i451 < $_size447; ++$_i451) {
                            $elem452 = null;
                            $xfer += $input->readString($elem452);
                            $this->meta_files []= $elem452;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->backup_name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->full);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->include_system_space);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->create_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('BackupMeta');
        if ($this->backup_info !== null) {
            if (!is_array($this->backup_info)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('backup_info', TType::MAP, 1);
            $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->backup_info));
            foreach ($this->backup_info as $kiter453 => $viter454) {
                $xfer += $output->writeI32($kiter453);
                $xfer += $viter454->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->meta_files !== null) {
            if (!is_array($this->meta_files)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('meta_files', TType::LST, 2);
            $output->writeListBegin(TType::STRING, count($this->meta_files));
            foreach ($this->meta_files as $iter455) {
                $xfer += $output->writeString($iter455);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->backup_name !== null) {
            $xfer += $output->writeFieldBegin('backup_name', TType::STRING, 3);
            $xfer += $output->writeString($this->backup_name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->full !== null) {
            $xfer += $output->writeFieldBegin('full', TType::BOOL, 4);
            $xfer += $output->writeBool($this->full);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->include_system_space !== null) {
            $xfer += $output->writeFieldBegin('include_system_space', TType::BOOL, 5);
            $xfer += $output->writeBool($this->include_system_space);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->create_time !== null) {
            $xfer += $output->writeFieldBegin('create_time', TType::I64, 6);
            $xfer += $output->writeI64($this->create_time);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
