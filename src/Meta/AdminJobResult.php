<?php
namespace Nebula\Meta;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class AdminJobResult
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'job_id',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'job_desc',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Meta\JobDesc',
                ),
        ),
        3 => array(
            'var' => 'task_desc',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Nebula\Meta\TaskDesc',
                ),
        ),
        4 => array(
            'var' => 'recovered_job_num',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var int
     */
    public $job_id = null;
    /**
     * @var \Nebula\Meta\JobDesc[]
     */
    public $job_desc = null;
    /**
     * @var \Nebula\Meta\TaskDesc[]
     */
    public $task_desc = null;
    /**
     * @var int
     */
    public $recovered_job_num = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['job_id'])) {
                $this->job_id = $vals['job_id'];
            }
            if (isset($vals['job_desc'])) {
                $this->job_desc = $vals['job_desc'];
            }
            if (isset($vals['task_desc'])) {
                $this->task_desc = $vals['task_desc'];
            }
            if (isset($vals['recovered_job_num'])) {
                $this->recovered_job_num = $vals['recovered_job_num'];
            }
        }
    }

    public function getName()
    {
        return 'AdminJobResult';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->job_id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->job_desc = array();
                        $_size60 = 0;
                        $_etype63 = 0;
                        $xfer += $input->readListBegin($_etype63, $_size60);
                        for ($_i64 = 0; $_i64 < $_size60; ++$_i64) {
                            $elem65 = null;
                            $elem65 = new \Nebula\Meta\JobDesc();
                            $xfer += $elem65->read($input);
                            $this->job_desc []= $elem65;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->task_desc = array();
                        $_size66 = 0;
                        $_etype69 = 0;
                        $xfer += $input->readListBegin($_etype69, $_size66);
                        for ($_i70 = 0; $_i70 < $_size66; ++$_i70) {
                            $elem71 = null;
                            $elem71 = new \Nebula\Meta\TaskDesc();
                            $xfer += $elem71->read($input);
                            $this->task_desc []= $elem71;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->recovered_job_num);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('AdminJobResult');
        if ($this->job_id !== null) {
            $xfer += $output->writeFieldBegin('job_id', TType::I32, 1);
            $xfer += $output->writeI32($this->job_id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->job_desc !== null) {
            if (!is_array($this->job_desc)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('job_desc', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->job_desc));
            foreach ($this->job_desc as $iter72) {
                $xfer += $iter72->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->task_desc !== null) {
            if (!is_array($this->task_desc)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('task_desc', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->task_desc));
            foreach ($this->task_desc as $iter73) {
                $xfer += $iter73->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->recovered_job_num !== null) {
            $xfer += $output->writeFieldBegin('recovered_job_num', TType::I32, 4);
            $xfer += $output->writeI32($this->recovered_job_num);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
