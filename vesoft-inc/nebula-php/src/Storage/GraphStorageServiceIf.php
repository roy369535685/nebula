<?php
namespace Nebula\Storage;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

interface GraphStorageServiceIf
{
    /**
     * @param \Nebula\Storage\GetNeighborsRequest $req
     * @return \Nebula\Storage\GetNeighborsResponse
     */
    public function getNeighbors(\Nebula\Storage\GetNeighborsRequest $req);
    /**
     * @param \Nebula\Storage\GetPropRequest $req
     * @return \Nebula\Storage\GetPropResponse
     */
    public function getProps(\Nebula\Storage\GetPropRequest $req);
    /**
     * @param \Nebula\Storage\AddVerticesRequest $req
     * @return \Nebula\Storage\ExecResponse
     */
    public function addVertices(\Nebula\Storage\AddVerticesRequest $req);
    /**
     * @param \Nebula\Storage\AddEdgesRequest $req
     * @return \Nebula\Storage\ExecResponse
     */
    public function addEdges(\Nebula\Storage\AddEdgesRequest $req);
    /**
     * @param \Nebula\Storage\DeleteEdgesRequest $req
     * @return \Nebula\Storage\ExecResponse
     */
    public function deleteEdges(\Nebula\Storage\DeleteEdgesRequest $req);
    /**
     * @param \Nebula\Storage\DeleteVerticesRequest $req
     * @return \Nebula\Storage\ExecResponse
     */
    public function deleteVertices(\Nebula\Storage\DeleteVerticesRequest $req);
    /**
     * @param \Nebula\Storage\DeleteTagsRequest $req
     * @return \Nebula\Storage\ExecResponse
     */
    public function deleteTags(\Nebula\Storage\DeleteTagsRequest $req);
    /**
     * @param \Nebula\Storage\UpdateVertexRequest $req
     * @return \Nebula\Storage\UpdateResponse
     */
    public function updateVertex(\Nebula\Storage\UpdateVertexRequest $req);
    /**
     * @param \Nebula\Storage\UpdateEdgeRequest $req
     * @return \Nebula\Storage\UpdateResponse
     */
    public function updateEdge(\Nebula\Storage\UpdateEdgeRequest $req);
    /**
     * @param \Nebula\Storage\ScanVertexRequest $req
     * @return \Nebula\Storage\ScanVertexResponse
     */
    public function scanVertex(\Nebula\Storage\ScanVertexRequest $req);
    /**
     * @param \Nebula\Storage\ScanEdgeRequest $req
     * @return \Nebula\Storage\ScanEdgeResponse
     */
    public function scanEdge(\Nebula\Storage\ScanEdgeRequest $req);
    /**
     * @param \Nebula\Storage\GetUUIDReq $req
     * @return \Nebula\Storage\GetUUIDResp
     */
    public function getUUID(\Nebula\Storage\GetUUIDReq $req);
    /**
     * @param \Nebula\Storage\LookupIndexRequest $req
     * @return \Nebula\Storage\LookupIndexResp
     */
    public function lookupIndex(\Nebula\Storage\LookupIndexRequest $req);
    /**
     * @param \Nebula\Storage\LookupAndTraverseRequest $req
     * @return \Nebula\Storage\GetNeighborsResponse
     */
    public function lookupAndTraverse(\Nebula\Storage\LookupAndTraverseRequest $req);
    /**
     * @param \Nebula\Storage\UpdateEdgeRequest $req
     * @return \Nebula\Storage\UpdateResponse
     */
    public function chainUpdateEdge(\Nebula\Storage\UpdateEdgeRequest $req);
    /**
     * @param \Nebula\Storage\AddEdgesRequest $req
     * @return \Nebula\Storage\ExecResponse
     */
    public function chainAddEdges(\Nebula\Storage\AddEdgesRequest $req);
}
