<?php
namespace Nebula\Common;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CheckpointInfo
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'partition_info',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Nebula\Common\PartitionBackupInfo',
        ),
        2 => array(
            'var' => 'path',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var \Nebula\Common\PartitionBackupInfo
     */
    public $partition_info = null;
    /**
     * @var string
     */
    public $path = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['partition_info'])) {
                $this->partition_info = $vals['partition_info'];
            }
            if (isset($vals['path'])) {
                $this->path = $vals['path'];
            }
        }
    }

    public function getName()
    {
        return 'CheckpointInfo';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->partition_info = new \Nebula\Common\PartitionBackupInfo();
                        $xfer += $this->partition_info->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->path);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CheckpointInfo');
        if ($this->partition_info !== null) {
            if (!is_object($this->partition_info)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('partition_info', TType::STRUCT, 1);
            $xfer += $this->partition_info->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->path !== null) {
            $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
            $xfer += $output->writeString($this->path);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
