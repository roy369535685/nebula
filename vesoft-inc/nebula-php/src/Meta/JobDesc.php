<?php
namespace Nebula\Meta;

/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class JobDesc
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'cmd',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\Nebula\Meta\AdminCmd',
        ),
        3 => array(
            'var' => 'paras',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'status',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\Nebula\Meta\JobStatus',
        ),
        5 => array(
            'var' => 'start_time',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        6 => array(
            'var' => 'stop_time',
            'isRequired' => false,
            'type' => TType::I64,
        ),
    );

    /**
     * @var int
     */
    public $id = null;
    /**
     * @var int
     */
    public $cmd = null;
    /**
     * @var string[]
     */
    public $paras = null;
    /**
     * @var int
     */
    public $status = null;
    /**
     * @var int
     */
    public $start_time = null;
    /**
     * @var int
     */
    public $stop_time = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['cmd'])) {
                $this->cmd = $vals['cmd'];
            }
            if (isset($vals['paras'])) {
                $this->paras = $vals['paras'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
            if (isset($vals['start_time'])) {
                $this->start_time = $vals['start_time'];
            }
            if (isset($vals['stop_time'])) {
                $this->stop_time = $vals['stop_time'];
            }
        }
    }

    public function getName()
    {
        return 'JobDesc';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->cmd);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->paras = array();
                        $_size53 = 0;
                        $_etype56 = 0;
                        $xfer += $input->readListBegin($_etype56, $_size53);
                        for ($_i57 = 0; $_i57 < $_size53; ++$_i57) {
                            $elem58 = null;
                            $xfer += $input->readString($elem58);
                            $this->paras []= $elem58;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->start_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->stop_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('JobDesc');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I32, 1);
            $xfer += $output->writeI32($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cmd !== null) {
            $xfer += $output->writeFieldBegin('cmd', TType::I32, 2);
            $xfer += $output->writeI32($this->cmd);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->paras !== null) {
            if (!is_array($this->paras)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('paras', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->paras));
            foreach ($this->paras as $iter59) {
                $xfer += $output->writeString($iter59);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', TType::I32, 4);
            $xfer += $output->writeI32($this->status);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->start_time !== null) {
            $xfer += $output->writeFieldBegin('start_time', TType::I64, 5);
            $xfer += $output->writeI64($this->start_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->stop_time !== null) {
            $xfer += $output->writeFieldBegin('stop_time', TType::I64, 6);
            $xfer += $output->writeI64($this->stop_time);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
